__includes ["utils.nls"]


to move-x [vehicleNum frontDestination-x]
  let veh-colour grey
  let y-axies-value 0
  let type-axies "null"
  let islegal true
  let message "ilegal move"
  
  ;find the values we need from the vehicals front patch
  ask patches [ 
    if (vehicleNumber = vehicleNum)[
      if (isvehiclefront)
      [
        ;getting values we need
        set veh-colour pcolor
        set y-axies-value axies-value
        set type-axies axies
      ]
    ]
  ]
  
  
  ;check if the car is on the correct axies
  ifelse(type-axies = "y")[
    set islegal false
    set message "ilegal move: wrong axies"
  ]
  [
    ;check if front destionation is blank (not wall/vehnum > 0)
    ask patch frontDestination-x y-axies-value [
      if(vehicleNumber > 0 AND vehicleNumber != vehicleNum)[
        set islegal false
        set message "ilegal move: vehicle at front location"
      ]
      if(isWall)[
        set islegal false
        set message "ilegal move: wall at front location"
      ]
    ] 
    ;check if read destionation is blank (not wall/vehnum > 0)
    ask patch (frontDestination-x - 1) y-axies-value [
      if(vehicleNumber > 0 AND vehicleNumber != vehicleNum)[
        set islegal false
        set message "ilegal move: vehicle at rear location"
      ]
      if(isWall)[
        set islegal false
        set message "ilegal move: wall at rear location"
      ]
    ]
    ;check if no car's in the way of move
    ;todo
  ]
  
  
  
  ifelse(islegal)[
    ask patches [ 
      if (vehicleNumber = vehicleNum)[
        if (isvehiclefront)
        [
          ;removeing old front
          nuke-patch
        ]
        ;make sure to remove the values from the old patches
        if (not isvehiclefront)[
          nuke-patch
        ]
      ] 
    ]
    
    ;telling the new vehical location patches thier values
    ask patches [ 
      ;tell the front destination patch its new values
      ask patch frontDestination-x y-axies-value [
        set pcolor veh-colour
        set vehicleNumber vehicleNum
        set isvehiclefront true
        set axies "x"
        set axies-value y-axies-value
      ]
      
      ;set the new rear section of the vehicle 
      ;(the hardcoded value limits the vehicle length to 2, storeing 'veh-lenght' will stop that)
      ask patch (frontDestination-x - 1) y-axies-value [
        set pcolor veh-colour
        set vehicleNumber vehicleNum
        set isvehiclefront false
        set axies "x"
        set axies-value y-axies-value
      ]
      
    ]
  ]
  [
    show message 
  ]
  
end

to move-y [vehicleNum frontDestination-y]
  let veh-colour grey
  let x-axies-value 0
  let type-axies "null"
  let islegal true
  let message "ilegal move"
  
  ;find the values we need from the vehicals front patch
  ask patches [ 
    if (vehicleNumber = vehicleNum)[
      if (isvehiclefront)
      [
        ;getting values we need
        set veh-colour pcolor
        set x-axies-value axies-value
        set type-axies axies
      ]
    ]
  ]
  
  ;check if the car is on the correct axies
  ifelse(type-axies = "x")[
    set islegal false
    set message "ilegal move: wrong axies"
  ]
  [
    ;check if front destionation is blank (not wall/vehnum > 0)
    ask patch x-axies-value frontDestination-y[
      if(vehicleNumber > 0 AND vehicleNumber != vehicleNum)[
        set islegal false
        set message "ilegal move: vehicle at front location"
      ]
      if(isWall)[
        set islegal false
        set message "ilegal move: wall at front location"
      ]
    ] 
    ;check if read destionation is blank (not wall/vehnum > 0)
    ask patch x-axies-value (frontDestination-y + 1) [
      if(vehicleNumber > 0 AND vehicleNumber != vehicleNum)[
        set islegal false
        set message "ilegal move: vehicle at rear location"
      ]
      if(isWall)[
        set islegal false
        set message "ilegal move: wall at rear location"
      ]
    ]
    ;check if no car's in the way of move
    ;todo
  ]
  
  ifelse(islegal)[
    ask patches [ 
      if (vehicleNumber = vehicleNum)[
        if (isvehiclefront)
        [
          ;removeing old front
          nuke-patch
        ]
        ;make sure to remove the values from the old patches
        if (not isvehiclefront)[
          nuke-patch
        ]
      ] 
    ]
    
    ;telling the new vehical location patches thier values
    ask patches [ 
      ;tell the front destination patch its new values
      ask patch x-axies-value frontDestination-y[
        set pcolor veh-colour
        set vehicleNumber vehicleNum
        set isvehiclefront true
        set axies "y"
        set axies-value x-axies-value
      ]
      
      ;set the new rear section of the vehicle 
      ;(the hardcoded value limits the vehicle length to 2, storeing 'veh-lenght' will stop that)
      ask patch x-axies-value (frontDestination-y + 1)[
        set pcolor veh-colour
        set vehicleNumber vehicleNum
        set isvehiclefront false
        set axies "y"
        set axies-value x-axies-value
      ]
      
    ]
  ]
  [
    show message 
  ]
  
end


to exit
  ask patches [ 
    if (vehicleNumber = 1 AND isvehiclefront)[
      ifelse(isExit = true)[
        show "player found exit"
      ][
        show "player is not at the exit"
      ]
    ]
  ]
end