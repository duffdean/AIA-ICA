
rushhour-lein.core=> (pprint (:txt (planner test-world2 (list 'at 8 3 'pv) primary-ops)))
(:dbg GOALS:)
(:dbg        (at 8 3 pv))
(:dbg ------)
(:dbg solving (at 8 3 pv))
(trying move-horiz)
(:dbg using=> move-horiz)
(new-mop {:del ((at 6 3 pv) (at 8 3 none)), :pre ((at 7 3 pv) (at 8 3 none) (protected 8 3 pv)), :when ((at 8 3 none) (at 7 3 ?_) (at 6 3 ?_) (at 1 3 pv) (at 2 3 pv) (clear-me 1 3 pv) (isa pv vehicle) (:guard (and (not= (? x) (? nx1) (? nx2)) (= 1 (abs (- (? nx1) (? nx2))) (abs (- (? x) (? nx1))) (abs (- (? vx1) (? vx2)))) (or (= (? vx1) (? vx)) (= (? vx2) (? vx))) (> (abs (- (? x) (? nx2))) (abs (- (? x) (? nx1)))) (> (abs (- (? x) (? vx1))) (abs (- (? nx1) (? vx1))))))), :txt ((pv moves to 8 3)), :name move-horiz, :achieves (at 8 3 pv), :post ((protected 8 3 pv) (at 7 3 pv)), :cmd ((move pv 8 3)), :add ((at 8 3 pv) (at 6 3 none))})
(:dbg new-goals ((protected 8 3 pv) (at 7 3 pv)))
(succeeded move-horiz)
(:dbg GOALS:)
(:dbg        (protected 8 3 pv))
(:dbg        (at 7 3 pv))
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (protected 8 3 pv))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(:dbg using=> protect)
(new-mop {:name protect, :achieves (protected 8 3 pv), :add ((protected 8 3 pv))})
(:dbg new-goals -none)
(succeeded protect)
(:dbg GOALS:)
(:dbg        [protect :=> (protected 8 3 pv)])
(:dbg        (at 7 3 pv))
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING protect => (protected 8 3 pv))
(:dbg ** ((protected 8 3 pv)))
(:dbg ** ((protected 8 3 pv)))
(:dbg => {:name protect, :achieves (protected 8 3 pv), :add ((protected 8 3 pv))})
(:dbg GOALS:)
(:dbg        (at 7 3 pv))
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (at 7 3 pv))
(trying move-horiz)
(:dbg using=> move-horiz)
(new-mop {:del ((at 5 3 pv) (at 7 3 none)), :pre ((at 6 3 pv) (at 7 3 none) (protected 7 3 pv)), :when ((at 7 3 none) (at 6 3 ?_) (at 5 3 ?_) (at 1 3 pv) (at 2 3 pv) (clear-me 1 3 pv) (isa pv vehicle) (:guard (and (not= (? x) (? nx1) (? nx2)) (= 1 (abs (- (? nx1) (? nx2))) (abs (- (? x) (? nx1))) (abs (- (? vx1) (? vx2)))) (or (= (? vx1) (? vx)) (= (? vx2) (? vx))) (> (abs (- (? x) (? nx2))) (abs (- (? x) (? nx1)))) (> (abs (- (? x) (? vx1))) (abs (- (? nx1) (? vx1))))))), :txt ((pv moves to 7 3)), :name move-horiz, :achieves (at 7 3 pv), :post ((protected 7 3 pv) (at 6 3 pv)), :cmd ((move pv 7 3)), :add ((at 7 3 pv) (at 5 3 none))})
(:dbg new-goals ((protected 7 3 pv) (at 6 3 pv)))
(succeeded move-horiz)
(:dbg GOALS:)
(:dbg        (protected 7 3 pv))
(:dbg        (at 6 3 pv))
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (protected 7 3 pv))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(:dbg using=> protect)
(new-mop {:name protect, :achieves (protected 7 3 pv), :add ((protected 7 3 pv))})
(:dbg new-goals -none)
(succeeded protect)
(:dbg GOALS:)
(:dbg        [protect :=> (protected 7 3 pv)])
(:dbg        (at 6 3 pv))
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING protect => (protected 7 3 pv))
(:dbg ** ((protected 7 3 pv)))
(:dbg ** ((protected 7 3 pv)))
(:dbg => {:name protect, :achieves (protected 7 3 pv), :add ((protected 7 3 pv))})
(:dbg GOALS:)
(:dbg        (at 6 3 pv))
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (at 6 3 pv))
(trying move-horiz)
(:dbg using=> move-horiz)
(new-mop {:del ((at 4 3 pv) (at 6 3 none)), :pre ((at 5 3 pv) (at 6 3 none) (protected 6 3 pv)), :when ((at 6 3 none) (at 5 3 ?_) (at 4 3 ?_) (at 1 3 pv) (at 2 3 pv) (clear-me 1 3 pv) (isa pv vehicle) (:guard (and (not= (? x) (? nx1) (? nx2)) (= 1 (abs (- (? nx1) (? nx2))) (abs (- (? x) (? nx1))) (abs (- (? vx1) (? vx2)))) (or (= (? vx1) (? vx)) (= (? vx2) (? vx))) (> (abs (- (? x) (? nx2))) (abs (- (? x) (? nx1)))) (> (abs (- (? x) (? vx1))) (abs (- (? nx1) (? vx1))))))), :txt ((pv moves to 6 3)), :name move-horiz, :achieves (at 6 3 pv), :post ((protected 6 3 pv) (at 5 3 pv)), :cmd ((move pv 6 3)), :add ((at 6 3 pv) (at 4 3 none))})
(:dbg new-goals ((protected 6 3 pv) (at 5 3 pv)))
(succeeded move-horiz)
(:dbg GOALS:)
(:dbg        (protected 6 3 pv))
(:dbg        (at 5 3 pv))
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (protected 6 3 pv))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(:dbg using=> protect)
(new-mop {:name protect, :achieves (protected 6 3 pv), :add ((protected 6 3 pv))})
(:dbg new-goals -none)
(succeeded protect)
(:dbg GOALS:)
(:dbg        [protect :=> (protected 6 3 pv)])
(:dbg        (at 5 3 pv))
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING protect => (protected 6 3 pv))
(:dbg ** ((protected 6 3 pv)))
(:dbg ** ((protected 6 3 pv)))
(:dbg => {:name protect, :achieves (protected 6 3 pv), :add ((protected 6 3 pv))})
(:dbg GOALS:)
(:dbg        (at 5 3 pv))
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (at 5 3 pv))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(:dbg using=> branch-vert)
(new-mop {:del (), :pre (), :when ((at 5 3 npv3) (isa npv3 vehicle) (orientation npv3 vert) (max-size 7 5)), :txt (), :name branch-vert, :achieves (at 5 3 pv), :post ((clear-me 5 3 npv3) (at 5 5 npv3) (cleared 5 3 npv3) (at 5 0 npv3) (cleared 5 3 npv3) (at 5 3 pv)), :cmd (), :add ()})
(:dbg new-goals ((clear-me 5 3 npv3) (at 5 5 npv3) (cleared 5 3 npv3) (at 5 0 npv3) (cleared 5 3 npv3) (at 5 3 pv)))
(succeeded branch-vert)
(:dbg GOALS:)
(:dbg        (clear-me 5 3 npv3))
(:dbg        (at 5 5 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (clear-me 5 3 npv3))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(trying clear-me)
(:dbg using=> clear-me)
(new-mop {:name clear-me, :achieves (clear-me 5 3 npv3), :add ((clear-me 5 3 npv3))})
(:dbg new-goals -none)
(succeeded clear-me)
(:dbg GOALS:)
(:dbg        [clear-me :=> (clear-me 5 3 npv3)])
(:dbg        (at 5 5 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING clear-me => (clear-me 5 3 npv3))
(:dbg ** ((clear-me 5 3 npv3)))
(:dbg ** ((clear-me 5 3 npv3)))
(:dbg => {:name clear-me, :achieves (clear-me 5 3 npv3), :add ((clear-me 5 3 npv3))})
(:dbg GOALS:)
(:dbg        (at 5 5 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (at 5 5 npv3))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(:dbg using=> branch-horiz)
(new-mop {:del (), :pre (), :when ((at 5 5 npv5) (isa npv5 vehicle) (orientation npv5 horiz) (max-size 7 5)), :txt (), :name branch-horiz, :achieves (at 5 5 npv3), :post ((clear-me 5 5 npv5) (at 7 5 npv5) (cleared 5 5 npv5) (at 0 5 npv5) (cleared 5 5 npv5) (at 5 5 npv3)), :cmd (), :add ()})
(:dbg new-goals ((clear-me 5 5 npv5) (at 7 5 npv5) (cleared 5 5 npv5) (at 0 5 npv5) (cleared 5 5 npv5) (at 5 5 npv3)))
(succeeded branch-horiz)
(:dbg GOALS:)
(:dbg        (clear-me 5 5 npv5))
(:dbg        (at 7 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 0 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (clear-me 5 5 npv5))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(trying clear-me)
(:dbg using=> clear-me)
(new-mop {:name clear-me, :achieves (clear-me 5 5 npv5), :add ((clear-me 5 5 npv5))})
(:dbg new-goals -none)
(succeeded clear-me)
(:dbg GOALS:)
(:dbg        [clear-me :=> (clear-me 5 5 npv5)])
(:dbg        (at 7 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 0 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING clear-me => (clear-me 5 5 npv5))
(:dbg ** ((clear-me 5 5 npv5)))
(:dbg ** ((clear-me 5 5 npv5)))
(:dbg => {:name clear-me, :achieves (clear-me 5 5 npv5), :add ((clear-me 5 5 npv5))})
(:dbg GOALS:)
(:dbg        (at 7 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 0 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (at 7 5 npv5))
(trying move-horiz)
(:dbg using=> move-horiz)
(new-mop {:del ((at 5 5 npv5) (at 7 5 none)), :pre ((at 6 5 npv5) (at 7 5 none) (protected 7 5 npv5)), :when ((at 7 5 none) (at 6 5 ?_) (at 5 5 ?_) (at 4 5 npv5) (at 5 5 npv5) (clear-me 5 5 npv5) (isa npv5 vehicle) (:guard (and (not= (? x) (? nx1) (? nx2)) (= 1 (abs (- (? nx1) (? nx2))) (abs (- (? x) (? nx1))) (abs (- (? vx1) (? vx2)))) (or (= (? vx1) (? vx)) (= (? vx2) (? vx))) (> (abs (- (? x) (? nx2))) (abs (- (? x) (? nx1)))) (> (abs (- (? x) (? vx1))) (abs (- (? nx1) (? vx1))))))), :txt ((npv5 moves to 7 5)), :name move-horiz, :achieves (at 7 5 npv5), :post ((protected 7 5 npv5) (at 6 5 npv5)), :cmd ((move npv5 7 5)), :add ((at 7 5 npv5) (at 5 5 none))})
(:dbg new-goals ((protected 7 5 npv5) (at 6 5 npv5)))
(succeeded move-horiz)
(:dbg GOALS:)
(:dbg        (protected 7 5 npv5))
(:dbg        (at 6 5 npv5))
(:dbg        [move-horiz :=> (at 7 5 npv5)])
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 0 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (protected 7 5 npv5))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(:dbg using=> protect)
(new-mop {:name protect, :achieves (protected 7 5 npv5), :add ((protected 7 5 npv5))})
(:dbg new-goals -none)
(succeeded protect)
(:dbg GOALS:)
(:dbg        [protect :=> (protected 7 5 npv5)])
(:dbg        (at 6 5 npv5))
(:dbg        [move-horiz :=> (at 7 5 npv5)])
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 0 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING protect => (protected 7 5 npv5))
(:dbg ** ((protected 7 5 npv5)))
(:dbg ** ((protected 7 5 npv5)))
(:dbg => {:name protect, :achieves (protected 7 5 npv5), :add ((protected 7 5 npv5))})
(:dbg GOALS:)
(:dbg        (at 6 5 npv5))
(:dbg        [move-horiz :=> (at 7 5 npv5)])
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 0 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (at 6 5 npv5))
(trying move-horiz)
(:dbg using=> move-horiz)
(new-mop {:del ((at 4 5 npv5) (at 6 5 none)), :pre ((at 5 5 npv5) (at 6 5 none) (protected 6 5 npv5)), :when ((at 6 5 none) (at 5 5 ?_) (at 4 5 ?_) (at 4 5 npv5) (at 5 5 npv5) (clear-me 5 5 npv5) (isa npv5 vehicle) (:guard (and (not= (? x) (? nx1) (? nx2)) (= 1 (abs (- (? nx1) (? nx2))) (abs (- (? x) (? nx1))) (abs (- (? vx1) (? vx2)))) (or (= (? vx1) (? vx)) (= (? vx2) (? vx))) (> (abs (- (? x) (? nx2))) (abs (- (? x) (? nx1)))) (> (abs (- (? x) (? vx1))) (abs (- (? nx1) (? vx1))))))), :txt ((npv5 moves to 6 5)), :name move-horiz, :achieves (at 6 5 npv5), :post ((protected 6 5 npv5) (at 5 5 npv5)), :cmd ((move npv5 6 5)), :add ((at 6 5 npv5) (at 4 5 none))})
(:dbg new-goals ((protected 6 5 npv5) (at 5 5 npv5)))
(succeeded move-horiz)
(:dbg GOALS:)
(:dbg        (protected 6 5 npv5))
(:dbg        (at 5 5 npv5))
(:dbg        [move-horiz :=> (at 6 5 npv5)])
(:dbg        [move-horiz :=> (at 7 5 npv5)])
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 0 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (protected 6 5 npv5))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(:dbg using=> protect)
(new-mop {:name protect, :achieves (protected 6 5 npv5), :add ((protected 6 5 npv5))})
(:dbg new-goals -none)
(succeeded protect)
(:dbg GOALS:)
(:dbg        [protect :=> (protected 6 5 npv5)])
(:dbg        (at 5 5 npv5))
(:dbg        [move-horiz :=> (at 6 5 npv5)])
(:dbg        [move-horiz :=> (at 7 5 npv5)])
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 0 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING protect => (protected 6 5 npv5))
(:dbg ** ((protected 6 5 npv5)))
(:dbg ** ((protected 6 5 npv5)))
(:dbg => {:name protect, :achieves (protected 6 5 npv5), :add ((protected 6 5 npv5))})
(:dbg GOALS:)
(:dbg        (at 5 5 npv5))
(:dbg        [move-horiz :=> (at 6 5 npv5)])
(:dbg        [move-horiz :=> (at 7 5 npv5)])
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 0 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg GOALS:)
(:dbg        [move-horiz :=> (at 6 5 npv5)])
(:dbg        [move-horiz :=> (at 7 5 npv5)])
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 0 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING move-horiz => (at 6 5 npv5))
(:dbg ** ((at 6 5 npv5) (at 4 5 none)))
(:dbg ** ((at 6 5 npv5) (at 4 5 none)))
(:dbg => {:del ((at 4 5 npv5) (at 6 5 none)), :pre ((at 5 5 npv5) (at 6 5 none) (protected 6 5 npv5)), :when ((at 6 5 none) (at 5 5 ?_) (at 4 5 ?_) (at 4 5 npv5) (at 5 5 npv5) (clear-me 5 5 npv5) (isa npv5 vehicle) (:guard (and (not= (? x) (? nx1) (? nx2)) (= 1 (abs (- (? nx1) (? nx2))) (abs (- (? x) (? nx1))) (abs (- (? vx1) (? vx2)))) (or (= (? vx1) (? vx)) (= (? vx2) (? vx))) (> (abs (- (? x) (? nx2))) (abs (- (? x) (? nx1)))) (> (abs (- (? x) (? vx1))) (abs (- (? nx1) (? vx1))))))), :txt ((npv5 moves to 6 5)), :name move-horiz, :achieves (at 6 5 npv5), :post ((protected 6 5 npv5) (at 5 5 npv5)), :cmd ((move npv5 6 5)), :add ((at 6 5 npv5) (at 4 5 none))})
(:dbg GOALS:)
(:dbg        [move-horiz :=> (at 7 5 npv5)])
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 0 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING move-horiz => (at 7 5 npv5))
(:dbg ** ((at 7 5 npv5) (at 5 5 none)))
(:dbg ** ((at 7 5 npv5) (at 5 5 none)))
(:dbg => {:del ((at 5 5 npv5) (at 7 5 none)), :pre ((at 6 5 npv5) (at 7 5 none) (protected 7 5 npv5)), :when ((at 7 5 none) (at 6 5 ?_) (at 5 5 ?_) (at 4 5 npv5) (at 5 5 npv5) (clear-me 5 5 npv5) (isa npv5 vehicle) (:guard (and (not= (? x) (? nx1) (? nx2)) (= 1 (abs (- (? nx1) (? nx2))) (abs (- (? x) (? nx1))) (abs (- (? vx1) (? vx2)))) (or (= (? vx1) (? vx)) (= (? vx2) (? vx))) (> (abs (- (? x) (? nx2))) (abs (- (? x) (? nx1)))) (> (abs (- (? x) (? vx1))) (abs (- (? nx1) (? vx1))))))), :txt ((npv5 moves to 7 5)), :name move-horiz, :achieves (at 7 5 npv5), :post ((protected 7 5 npv5) (at 6 5 npv5)), :cmd ((move npv5 7 5)), :add ((at 7 5 npv5) (at 5 5 none))})
(:dbg GOALS:)
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 0 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (cleared 5 5 npv5))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(trying clear-me)
(trying cleared)
(:dbg using=> cleared)
(new-mop {:name cleared, :achieves (cleared 5 5 npv5), :when ((at 5 5 none)), :del ((clear-me 5 5 npv5))})
(:dbg new-goals -none)
(succeeded cleared)
(:dbg GOALS:)
(:dbg        [cleared :=> (cleared 5 5 npv5)])
(:dbg        (at 0 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING cleared => (cleared 5 5 npv5))
(:dbg ** nil)
(:dbg ** nil)
(:dbg => {:name cleared, :achieves (cleared 5 5 npv5), :when ((at 5 5 none)), :del ((clear-me 5 5 npv5))})
(:dbg GOALS:)
(:dbg        (at 0 5 npv5))
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (at 0 5 npv5))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(trying clear-me)
(trying cleared)
(:dbg GOALS:)
(:dbg        (cleared 5 5 npv5))
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (cleared 5 5 npv5))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(trying clear-me)
(trying cleared)
(:dbg using=> cleared)
(new-mop {:name cleared, :achieves (cleared 5 5 npv5), :when ((at 5 5 none)), :del ((clear-me 5 5 npv5))})
(:dbg new-goals -none)
(succeeded cleared)
(:dbg GOALS:)
(:dbg        [cleared :=> (cleared 5 5 npv5)])
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING cleared => (cleared 5 5 npv5))
(:dbg ** nil)
(:dbg ** nil)
(:dbg => {:name cleared, :achieves (cleared 5 5 npv5), :when ((at 5 5 none)), :del ((clear-me 5 5 npv5))})
(:dbg GOALS:)
(:dbg        (at 5 5 npv3))
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (at 5 5 npv3))
(trying move-horiz)
(trying move-vert)
(:dbg using=> move-vert)
(new-mop {:del ((at 5 3 npv3) (at 5 5 none)), :pre ((at 5 4 npv3) (at 5 5 none) (protected 5 5 npv3)), :when ((at 5 5 none) (at 5 4 ?_) (at 5 3 ?_) (at 5 2 npv3) (at 5 3 npv3) (clear-me 5 3 npv3) (isa npv3 vehicle) (:guard (and (not= (? y) (? ny1) (? ny2)) (= 1 (abs (- (? ny1) (? ny2))) (abs (- (? y) (? ny1))) (abs (- (? vy1) (? vy2)))) (or (= (? vy1) (? vy)) (= (? vy2) (? vy))) (> (abs (- (? y) (? ny2))) (abs (- (? y) (? ny1)))) (> (abs (- (? y) (? vy1))) (abs (- (? ny1) (? vy1))))))), :txt ((npv3 moves to 5 5)), :name move-vert, :achieves (at 5 5 npv3), :post ((protected 5 5 npv3) (at 5 4 npv3)), :cmd ((move npv3 5 5)), :add ((at 5 5 npv3) (at 5 3 none))})
(:dbg new-goals ((protected 5 5 npv3) (at 5 4 npv3)))
(succeeded move-vert)
(:dbg GOALS:)
(:dbg        (protected 5 5 npv3))
(:dbg        (at 5 4 npv3))
(:dbg        [move-vert :=> (at 5 5 npv3)])
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (protected 5 5 npv3))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(:dbg using=> protect)
(new-mop {:name protect, :achieves (protected 5 5 npv3), :add ((protected 5 5 npv3))})
(:dbg new-goals -none)
(succeeded protect)
(:dbg GOALS:)
(:dbg        [protect :=> (protected 5 5 npv3)])
(:dbg        (at 5 4 npv3))
(:dbg        [move-vert :=> (at 5 5 npv3)])
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING protect => (protected 5 5 npv3))
(:dbg ** ((protected 5 5 npv3)))
(:dbg ** ((protected 5 5 npv3)))
(:dbg => {:name protect, :achieves (protected 5 5 npv3), :add ((protected 5 5 npv3))})
(:dbg GOALS:)
(:dbg        (at 5 4 npv3))
(:dbg        [move-vert :=> (at 5 5 npv3)])
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (at 5 4 npv3))
(trying move-horiz)
(trying move-vert)
(:dbg using=> move-vert)
(new-mop {:del ((at 5 2 npv3) (at 5 4 none)), :pre ((at 5 3 npv3) (at 5 4 none) (protected 5 4 npv3)), :when ((at 5 4 none) (at 5 3 ?_) (at 5 2 ?_) (at 5 2 npv3) (at 5 3 npv3) (clear-me 5 3 npv3) (isa npv3 vehicle) (:guard (and (not= (? y) (? ny1) (? ny2)) (= 1 (abs (- (? ny1) (? ny2))) (abs (- (? y) (? ny1))) (abs (- (? vy1) (? vy2)))) (or (= (? vy1) (? vy)) (= (? vy2) (? vy))) (> (abs (- (? y) (? ny2))) (abs (- (? y) (? ny1)))) (> (abs (- (? y) (? vy1))) (abs (- (? ny1) (? vy1))))))), :txt ((npv3 moves to 5 4)), :name move-vert, :achieves (at 5 4 npv3), :post ((protected 5 4 npv3) (at 5 3 npv3)), :cmd ((move npv3 5 4)), :add ((at 5 4 npv3) (at 5 2 none))})
(:dbg new-goals ((protected 5 4 npv3) (at 5 3 npv3)))
(succeeded move-vert)
(:dbg GOALS:)
(:dbg        (protected 5 4 npv3))
(:dbg        (at 5 3 npv3))
(:dbg        [move-vert :=> (at 5 4 npv3)])
(:dbg        [move-vert :=> (at 5 5 npv3)])
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (protected 5 4 npv3))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(:dbg using=> protect)
(new-mop {:name protect, :achieves (protected 5 4 npv3), :add ((protected 5 4 npv3))})
(:dbg new-goals -none)
(succeeded protect)
(:dbg GOALS:)
(:dbg        [protect :=> (protected 5 4 npv3)])
(:dbg        (at 5 3 npv3))
(:dbg        [move-vert :=> (at 5 4 npv3)])
(:dbg        [move-vert :=> (at 5 5 npv3)])
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING protect => (protected 5 4 npv3))
(:dbg ** ((protected 5 4 npv3)))
(:dbg ** ((protected 5 4 npv3)))
(:dbg => {:name protect, :achieves (protected 5 4 npv3), :add ((protected 5 4 npv3))})
(:dbg GOALS:)
(:dbg        (at 5 3 npv3))
(:dbg        [move-vert :=> (at 5 4 npv3)])
(:dbg        [move-vert :=> (at 5 5 npv3)])
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg GOALS:)
(:dbg        [move-vert :=> (at 5 4 npv3)])
(:dbg        [move-vert :=> (at 5 5 npv3)])
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING move-vert => (at 5 4 npv3))
(:dbg ** ((at 5 4 npv3) (at 5 2 none)))
(:dbg ** ((at 5 4 npv3) (at 5 2 none)))
(:dbg => {:del ((at 5 2 npv3) (at 5 4 none)), :pre ((at 5 3 npv3) (at 5 4 none) (protected 5 4 npv3)), :when ((at 5 4 none) (at 5 3 ?_) (at 5 2 ?_) (at 5 2 npv3) (at 5 3 npv3) (clear-me 5 3 npv3) (isa npv3 vehicle) (:guard (and (not= (? y) (? ny1) (? ny2)) (= 1 (abs (- (? ny1) (? ny2))) (abs (- (? y) (? ny1))) (abs (- (? vy1) (? vy2)))) (or (= (? vy1) (? vy)) (= (? vy2) (? vy))) (> (abs (- (? y) (? ny2))) (abs (- (? y) (? ny1)))) (> (abs (- (? y) (? vy1))) (abs (- (? ny1) (? vy1))))))), :txt ((npv3 moves to 5 4)), :name move-vert, :achieves (at 5 4 npv3), :post ((protected 5 4 npv3) (at 5 3 npv3)), :cmd ((move npv3 5 4)), :add ((at 5 4 npv3) (at 5 2 none))})
(:dbg GOALS:)
(:dbg        [move-vert :=> (at 5 5 npv3)])
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING move-vert => (at 5 5 npv3))
(:dbg ** ((at 5 5 npv3) (at 5 3 none)))
(:dbg ** ((at 5 5 npv3) (at 5 3 none)))
(:dbg => {:del ((at 5 3 npv3) (at 5 5 none)), :pre ((at 5 4 npv3) (at 5 5 none) (protected 5 5 npv3)), :when ((at 5 5 none) (at 5 4 ?_) (at 5 3 ?_) (at 5 2 npv3) (at 5 3 npv3) (clear-me 5 3 npv3) (isa npv3 vehicle) (:guard (and (not= (? y) (? ny1) (? ny2)) (= 1 (abs (- (? ny1) (? ny2))) (abs (- (? y) (? ny1))) (abs (- (? vy1) (? vy2)))) (or (= (? vy1) (? vy)) (= (? vy2) (? vy))) (> (abs (- (? y) (? ny2))) (abs (- (? y) (? ny1)))) (> (abs (- (? y) (? vy1))) (abs (- (? ny1) (? vy1))))))), :txt ((npv3 moves to 5 5)), :name move-vert, :achieves (at 5 5 npv3), :post ((protected 5 5 npv3) (at 5 4 npv3)), :cmd ((move npv3 5 5)), :add ((at 5 5 npv3) (at 5 3 none))})
(:dbg GOALS:)
(:dbg        [branch-horiz :=> (at 5 5 npv3)])
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING branch-horiz => (at 5 5 npv3))
(:dbg ** ())
(:dbg ** ())
(:dbg => {:del (), :pre (), :when ((at 5 5 npv5) (isa npv5 vehicle) (orientation npv5 horiz) (max-size 7 5)), :txt (), :name branch-horiz, :achieves (at 5 5 npv3), :post ((clear-me 5 5 npv5) (at 7 5 npv5) (cleared 5 5 npv5) (at 0 5 npv5) (cleared 5 5 npv5) (at 5 5 npv3)), :cmd (), :add ()})
(:dbg GOALS:)
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (cleared 5 3 npv3))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(trying clear-me)
(trying cleared)
(:dbg using=> cleared)
(new-mop {:name cleared, :achieves (cleared 5 3 npv3), :when ((at 5 3 none)), :del ((clear-me 5 3 npv3))})
(:dbg new-goals -none)
(succeeded cleared)
(:dbg GOALS:)
(:dbg        [cleared :=> (cleared 5 3 npv3)])
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING cleared => (cleared 5 3 npv3))
(:dbg ** nil)
(:dbg ** nil)
(:dbg => {:name cleared, :achieves (cleared 5 3 npv3), :when ((at 5 3 none)), :del ((clear-me 5 3 npv3))})
(:dbg GOALS:)
(:dbg        (at 5 0 npv3))
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (at 5 0 npv3))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(trying clear-me)
(trying cleared)
(:dbg GOALS:)
(:dbg        (cleared 5 3 npv3))
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (cleared 5 3 npv3))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(trying clear-me)
(trying cleared)
(:dbg using=> cleared)
(new-mop {:name cleared, :achieves (cleared 5 3 npv3), :when ((at 5 3 none)), :del ((clear-me 5 3 npv3))})
(:dbg new-goals -none)
(succeeded cleared)
(:dbg GOALS:)
(:dbg        [cleared :=> (cleared 5 3 npv3)])
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING cleared => (cleared 5 3 npv3))
(:dbg ** nil)
(:dbg ** nil)
(:dbg => {:name cleared, :achieves (cleared 5 3 npv3), :when ((at 5 3 none)), :del ((clear-me 5 3 npv3))})
(:dbg GOALS:)
(:dbg        (at 5 3 pv))
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (at 5 3 pv))
(trying move-horiz)
(:dbg using=> move-horiz)
(new-mop {:del ((at 3 3 pv) (at 5 3 none)), :pre ((at 4 3 pv) (at 5 3 none) (protected 5 3 pv)), :when ((at 5 3 none) (at 4 3 ?_) (at 3 3 ?_) (at 1 3 pv) (at 2 3 pv) (clear-me 1 3 pv) (isa pv vehicle) (:guard (and (not= (? x) (? nx1) (? nx2)) (= 1 (abs (- (? nx1) (? nx2))) (abs (- (? x) (? nx1))) (abs (- (? vx1) (? vx2)))) (or (= (? vx1) (? vx)) (= (? vx2) (? vx))) (> (abs (- (? x) (? nx2))) (abs (- (? x) (? nx1)))) (> (abs (- (? x) (? vx1))) (abs (- (? nx1) (? vx1))))))), :txt ((pv moves to 5 3)), :name move-horiz, :achieves (at 5 3 pv), :post ((protected 5 3 pv) (at 4 3 pv)), :cmd ((move pv 5 3)), :add ((at 5 3 pv) (at 3 3 none))})
(:dbg new-goals ((protected 5 3 pv) (at 4 3 pv)))
(succeeded move-horiz)
(:dbg GOALS:)
(:dbg        (protected 5 3 pv))
(:dbg        (at 4 3 pv))
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (protected 5 3 pv))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(:dbg using=> protect)
(new-mop {:name protect, :achieves (protected 5 3 pv), :add ((protected 5 3 pv))})
(:dbg new-goals -none)
(succeeded protect)
(:dbg GOALS:)
(:dbg        [protect :=> (protected 5 3 pv)])
(:dbg        (at 4 3 pv))
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING protect => (protected 5 3 pv))
(:dbg ** ((protected 5 3 pv)))
(:dbg ** ((protected 5 3 pv)))
(:dbg => {:name protect, :achieves (protected 5 3 pv), :add ((protected 5 3 pv))})
(:dbg GOALS:)
(:dbg        (at 4 3 pv))
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (at 4 3 pv))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(:dbg using=> branch-vert)
(new-mop {:del (), :pre (), :when ((at 4 3 npv2) (isa npv2 vehicle) (orientation npv2 vert) (max-size 7 5)), :txt (), :name branch-vert, :achieves (at 4 3 pv), :post ((clear-me 4 3 npv2) (at 4 5 npv2) (cleared 4 3 npv2) (at 4 0 npv2) (cleared 4 3 npv2) (at 4 3 pv)), :cmd (), :add ()})
(:dbg new-goals ((clear-me 4 3 npv2) (at 4 5 npv2) (cleared 4 3 npv2) (at 4 0 npv2) (cleared 4 3 npv2) (at 4 3 pv)))
(succeeded branch-vert)
(:dbg GOALS:)
(:dbg        (clear-me 4 3 npv2))
(:dbg        (at 4 5 npv2))
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 0 npv2))
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 3 pv))
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (clear-me 4 3 npv2))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(trying clear-me)
(:dbg using=> clear-me)
(new-mop {:name clear-me, :achieves (clear-me 4 3 npv2), :add ((clear-me 4 3 npv2))})
(:dbg new-goals -none)
(succeeded clear-me)
(:dbg GOALS:)
(:dbg        [clear-me :=> (clear-me 4 3 npv2)])
(:dbg        (at 4 5 npv2))
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 0 npv2))
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 3 pv))
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING clear-me => (clear-me 4 3 npv2))
(:dbg ** ((clear-me 4 3 npv2)))
(:dbg ** ((clear-me 4 3 npv2)))
(:dbg => {:name clear-me, :achieves (clear-me 4 3 npv2), :add ((clear-me 4 3 npv2))})
(:dbg GOALS:)
(:dbg        (at 4 5 npv2))
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 0 npv2))
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 3 pv))
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (at 4 5 npv2))
(trying move-horiz)
(trying move-vert)
(:dbg using=> move-vert)
(new-mop {:del ((at 4 3 npv2) (at 4 5 none)), :pre ((at 4 4 npv2) (at 4 5 none) (protected 4 5 npv2)), :when ((at 4 5 none) (at 4 4 ?_) (at 4 3 ?_) (at 4 3 npv2) (at 4 4 npv2) (clear-me 4 3 npv2) (isa npv2 vehicle) (:guard (and (not= (? y) (? ny1) (? ny2)) (= 1 (abs (- (? ny1) (? ny2))) (abs (- (? y) (? ny1))) (abs (- (? vy1) (? vy2)))) (or (= (? vy1) (? vy)) (= (? vy2) (? vy))) (> (abs (- (? y) (? ny2))) (abs (- (? y) (? ny1)))) (> (abs (- (? y) (? vy1))) (abs (- (? ny1) (? vy1))))))), :txt ((npv2 moves to 4 5)), :name move-vert, :achieves (at 4 5 npv2), :post ((protected 4 5 npv2) (at 4 4 npv2)), :cmd ((move npv2 4 5)), :add ((at 4 5 npv2) (at 4 3 none))})
(:dbg new-goals ((protected 4 5 npv2) (at 4 4 npv2)))
(succeeded move-vert)
(:dbg GOALS:)
(:dbg        (protected 4 5 npv2))
(:dbg        (at 4 4 npv2))
(:dbg        [move-vert :=> (at 4 5 npv2)])
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 0 npv2))
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 3 pv))
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (protected 4 5 npv2))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(:dbg using=> protect)
(new-mop {:name protect, :achieves (protected 4 5 npv2), :add ((protected 4 5 npv2))})
(:dbg new-goals -none)
(succeeded protect)
(:dbg GOALS:)
(:dbg        [protect :=> (protected 4 5 npv2)])
(:dbg        (at 4 4 npv2))
(:dbg        [move-vert :=> (at 4 5 npv2)])
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 0 npv2))
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 3 pv))
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING protect => (protected 4 5 npv2))
(:dbg ** ((protected 4 5 npv2)))
(:dbg ** ((protected 4 5 npv2)))
(:dbg => {:name protect, :achieves (protected 4 5 npv2), :add ((protected 4 5 npv2))})
(:dbg GOALS:)
(:dbg        (at 4 4 npv2))
(:dbg        [move-vert :=> (at 4 5 npv2)])
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 0 npv2))
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 3 pv))
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg GOALS:)
(:dbg        [move-vert :=> (at 4 5 npv2)])
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 0 npv2))
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 3 pv))
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING move-vert => (at 4 5 npv2))
(:dbg ** ((at 4 5 npv2) (at 4 3 none)))
(:dbg ** ((at 4 5 npv2) (at 4 3 none)))
(:dbg => {:del ((at 4 3 npv2) (at 4 5 none)), :pre ((at 4 4 npv2) (at 4 5 none) (protected 4 5 npv2)), :when ((at 4 5 none) (at 4 4 ?_) (at 4 3 ?_) (at 4 3 npv2) (at 4 4 npv2) (clear-me 4 3 npv2) (isa npv2 vehicle) (:guard (and (not= (? y) (? ny1) (? ny2)) (= 1 (abs (- (? ny1) (? ny2))) (abs (- (? y) (? ny1))) (abs (- (? vy1) (? vy2)))) (or (= (? vy1) (? vy)) (= (? vy2) (? vy))) (> (abs (- (? y) (? ny2))) (abs (- (? y) (? ny1)))) (> (abs (- (? y) (? vy1))) (abs (- (? ny1) (? vy1))))))), :txt ((npv2 moves to 4 5)), :name move-vert, :achieves (at 4 5 npv2), :post ((protected 4 5 npv2) (at 4 4 npv2)), :cmd ((move npv2 4 5)), :add ((at 4 5 npv2) (at 4 3 none))})
(:dbg GOALS:)
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 0 npv2))
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 3 pv))
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (cleared 4 3 npv2))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(trying clear-me)
(trying cleared)
(:dbg using=> cleared)
(new-mop {:name cleared, :achieves (cleared 4 3 npv2), :when ((at 4 3 none)), :del ((clear-me 4 3 npv2))})
(:dbg new-goals -none)
(succeeded cleared)
(:dbg GOALS:)
(:dbg        [cleared :=> (cleared 4 3 npv2)])
(:dbg        (at 4 0 npv2))
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 3 pv))
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING cleared => (cleared 4 3 npv2))
(:dbg ** nil)
(:dbg ** nil)
(:dbg => {:name cleared, :achieves (cleared 4 3 npv2), :when ((at 4 3 none)), :del ((clear-me 4 3 npv2))})
(:dbg GOALS:)
(:dbg        (at 4 0 npv2))
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 3 pv))
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (at 4 0 npv2))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(trying clear-me)
(trying cleared)
(:dbg GOALS:)
(:dbg        (cleared 4 3 npv2))
(:dbg        (at 4 3 pv))
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (cleared 4 3 npv2))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(trying clear-me)
(trying cleared)
(:dbg using=> cleared)
(new-mop {:name cleared, :achieves (cleared 4 3 npv2), :when ((at 4 3 none)), :del ((clear-me 4 3 npv2))})
(:dbg new-goals -none)
(succeeded cleared)
(:dbg GOALS:)
(:dbg        [cleared :=> (cleared 4 3 npv2)])
(:dbg        (at 4 3 pv))
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING cleared => (cleared 4 3 npv2))
(:dbg ** nil)
(:dbg ** nil)
(:dbg => {:name cleared, :achieves (cleared 4 3 npv2), :when ((at 4 3 none)), :del ((clear-me 4 3 npv2))})
(:dbg GOALS:)
(:dbg        (at 4 3 pv))
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (at 4 3 pv))
(trying move-horiz)
(:dbg using=> move-horiz)
(new-mop {:del ((at 2 3 pv) (at 4 3 none)), :pre ((at 3 3 pv) (at 4 3 none) (protected 4 3 pv)), :when ((at 4 3 none) (at 3 3 ?_) (at 2 3 ?_) (at 1 3 pv) (at 2 3 pv) (clear-me 1 3 pv) (isa pv vehicle) (:guard (and (not= (? x) (? nx1) (? nx2)) (= 1 (abs (- (? nx1) (? nx2))) (abs (- (? x) (? nx1))) (abs (- (? vx1) (? vx2)))) (or (= (? vx1) (? vx)) (= (? vx2) (? vx))) (> (abs (- (? x) (? nx2))) (abs (- (? x) (? nx1)))) (> (abs (- (? x) (? vx1))) (abs (- (? nx1) (? vx1))))))), :txt ((pv moves to 4 3)), :name move-horiz, :achieves (at 4 3 pv), :post ((protected 4 3 pv) (at 3 3 pv)), :cmd ((move pv 4 3)), :add ((at 4 3 pv) (at 2 3 none))})
(:dbg new-goals ((protected 4 3 pv) (at 3 3 pv)))
(succeeded move-horiz)
(:dbg GOALS:)
(:dbg        (protected 4 3 pv))
(:dbg        (at 3 3 pv))
(:dbg        [move-horiz :=> (at 4 3 pv)])
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (protected 4 3 pv))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(:dbg using=> protect)
(new-mop {:name protect, :achieves (protected 4 3 pv), :add ((protected 4 3 pv))})
(:dbg new-goals -none)
(succeeded protect)
(:dbg GOALS:)
(:dbg        [protect :=> (protected 4 3 pv)])
(:dbg        (at 3 3 pv))
(:dbg        [move-horiz :=> (at 4 3 pv)])
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING protect => (protected 4 3 pv))
(:dbg ** ((protected 4 3 pv)))
(:dbg ** ((protected 4 3 pv)))
(:dbg => {:name protect, :achieves (protected 4 3 pv), :add ((protected 4 3 pv))})
(:dbg GOALS:)
(:dbg        (at 3 3 pv))
(:dbg        [move-horiz :=> (at 4 3 pv)])
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (at 3 3 pv))
(trying move-horiz)
(:dbg using=> move-horiz)
(new-mop {:del ((at 1 3 pv) (at 3 3 none)), :pre ((at 2 3 pv) (at 3 3 none) (protected 3 3 pv)), :when ((at 3 3 none) (at 2 3 ?_) (at 1 3 ?_) (at 1 3 pv) (at 2 3 pv) (clear-me 1 3 pv) (isa pv vehicle) (:guard (and (not= (? x) (? nx1) (? nx2)) (= 1 (abs (- (? nx1) (? nx2))) (abs (- (? x) (? nx1))) (abs (- (? vx1) (? vx2)))) (or (= (? vx1) (? vx)) (= (? vx2) (? vx))) (> (abs (- (? x) (? nx2))) (abs (- (? x) (? nx1)))) (> (abs (- (? x) (? vx1))) (abs (- (? nx1) (? vx1))))))), :txt ((pv moves to 3 3)), :name move-horiz, :achieves (at 3 3 pv), :post ((protected 3 3 pv) (at 2 3 pv)), :cmd ((move pv 3 3)), :add ((at 3 3 pv) (at 1 3 none))})
(:dbg new-goals ((protected 3 3 pv) (at 2 3 pv)))
(succeeded move-horiz)
(:dbg GOALS:)
(:dbg        (protected 3 3 pv))
(:dbg        (at 2 3 pv))
(:dbg        [move-horiz :=> (at 3 3 pv)])
(:dbg        [move-horiz :=> (at 4 3 pv)])
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg solving (protected 3 3 pv))
(trying move-horiz)
(trying move-vert)
(trying branch-horiz)
(trying branch-vert)
(trying protect)
(:dbg using=> protect)
(new-mop {:name protect, :achieves (protected 3 3 pv), :add ((protected 3 3 pv))})
(:dbg new-goals -none)
(succeeded protect)
(:dbg GOALS:)
(:dbg        [protect :=> (protected 3 3 pv)])
(:dbg        (at 2 3 pv))
(:dbg        [move-horiz :=> (at 3 3 pv)])
(:dbg        [move-horiz :=> (at 4 3 pv)])
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING protect => (protected 3 3 pv))
(:dbg ** ((protected 3 3 pv)))
(:dbg ** ((protected 3 3 pv)))
(:dbg => {:name protect, :achieves (protected 3 3 pv), :add ((protected 3 3 pv))})
(:dbg GOALS:)
(:dbg        (at 2 3 pv))
(:dbg        [move-horiz :=> (at 3 3 pv)])
(:dbg        [move-horiz :=> (at 4 3 pv)])
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg GOALS:)
(:dbg        [move-horiz :=> (at 3 3 pv)])
(:dbg        [move-horiz :=> (at 4 3 pv)])
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING move-horiz => (at 3 3 pv))
(:dbg ** ((at 3 3 pv) (at 1 3 none)))
(:dbg ** ((at 3 3 pv) (at 1 3 none)))
(:dbg => {:del ((at 1 3 pv) (at 3 3 none)), :pre ((at 2 3 pv) (at 3 3 none) (protected 3 3 pv)), :when ((at 3 3 none) (at 2 3 ?_) (at 1 3 ?_) (at 1 3 pv) (at 2 3 pv) (clear-me 1 3 pv) (isa pv vehicle) (:guard (and (not= (? x) (? nx1) (? nx2)) (= 1 (abs (- (? nx1) (? nx2))) (abs (- (? x) (? nx1))) (abs (- (? vx1) (? vx2)))) (or (= (? vx1) (? vx)) (= (? vx2) (? vx))) (> (abs (- (? x) (? nx2))) (abs (- (? x) (? nx1)))) (> (abs (- (? x) (? vx1))) (abs (- (? nx1) (? vx1))))))), :txt ((pv moves to 3 3)), :name move-horiz, :achieves (at 3 3 pv), :post ((protected 3 3 pv) (at 2 3 pv)), :cmd ((move pv 3 3)), :add ((at 3 3 pv) (at 1 3 none))})
(:dbg GOALS:)
(:dbg        [move-horiz :=> (at 4 3 pv)])
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING move-horiz => (at 4 3 pv))
(:dbg ** ((at 4 3 pv) (at 2 3 none)))
(:dbg ** ((at 4 3 pv) (at 2 3 none)))
(:dbg => {:del ((at 2 3 pv) (at 4 3 none)), :pre ((at 3 3 pv) (at 4 3 none) (protected 4 3 pv)), :when ((at 4 3 none) (at 3 3 ?_) (at 2 3 ?_) (at 1 3 pv) (at 2 3 pv) (clear-me 1 3 pv) (isa pv vehicle) (:guard (and (not= (? x) (? nx1) (? nx2)) (= 1 (abs (- (? nx1) (? nx2))) (abs (- (? x) (? nx1))) (abs (- (? vx1) (? vx2)))) (or (= (? vx1) (? vx)) (= (? vx2) (? vx))) (> (abs (- (? x) (? nx2))) (abs (- (? x) (? nx1)))) (> (abs (- (? x) (? vx1))) (abs (- (? nx1) (? vx1))))))), :txt ((pv moves to 4 3)), :name move-horiz, :achieves (at 4 3 pv), :post ((protected 4 3 pv) (at 3 3 pv)), :cmd ((move pv 4 3)), :add ((at 4 3 pv) (at 2 3 none))})
(:dbg GOALS:)
(:dbg        [branch-vert :=> (at 4 3 pv)])
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING branch-vert => (at 4 3 pv))
(:dbg ** ())
(:dbg ** ())
(:dbg => {:del (), :pre (), :when ((at 4 3 npv2) (isa npv2 vehicle) (orientation npv2 vert) (max-size 7 5)), :txt (), :name branch-vert, :achieves (at 4 3 pv), :post ((clear-me 4 3 npv2) (at 4 5 npv2) (cleared 4 3 npv2) (at 4 0 npv2) (cleared 4 3 npv2) (at 4 3 pv)), :cmd (), :add ()})
(:dbg GOALS:)
(:dbg        [move-horiz :=> (at 5 3 pv)])
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING move-horiz => (at 5 3 pv))
(:dbg ** ((at 5 3 pv) (at 3 3 none)))
(:dbg ** ((at 5 3 pv) (at 3 3 none)))
(:dbg => {:del ((at 3 3 pv) (at 5 3 none)), :pre ((at 4 3 pv) (at 5 3 none) (protected 5 3 pv)), :when ((at 5 3 none) (at 4 3 ?_) (at 3 3 ?_) (at 1 3 pv) (at 2 3 pv) (clear-me 1 3 pv) (isa pv vehicle) (:guard (and (not= (? x) (? nx1) (? nx2)) (= 1 (abs (- (? nx1) (? nx2))) (abs (- (? x) (? nx1))) (abs (- (? vx1) (? vx2)))) (or (= (? vx1) (? vx)) (= (? vx2) (? vx))) (> (abs (- (? x) (? nx2))) (abs (- (? x) (? nx1)))) (> (abs (- (? x) (? vx1))) (abs (- (? nx1) (? vx1))))))), :txt ((pv moves to 5 3)), :name move-horiz, :achieves (at 5 3 pv), :post ((protected 5 3 pv) (at 4 3 pv)), :cmd ((move pv 5 3)), :add ((at 5 3 pv) (at 3 3 none))})
(:dbg GOALS:)
(:dbg        [branch-vert :=> (at 5 3 pv)])
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING branch-vert => (at 5 3 pv))
(:dbg ** ())
(:dbg ** ())
(:dbg => {:del (), :pre (), :when ((at 5 3 npv3) (isa npv3 vehicle) (orientation npv3 vert) (max-size 7 5)), :txt (), :name branch-vert, :achieves (at 5 3 pv), :post ((clear-me 5 3 npv3) (at 5 5 npv3) (cleared 5 3 npv3) (at 5 0 npv3) (cleared 5 3 npv3) (at 5 3 pv)), :cmd (), :add ()})
(:dbg GOALS:)
(:dbg        [move-horiz :=> (at 6 3 pv)])
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING move-horiz => (at 6 3 pv))
(:dbg ** ((at 6 3 pv) (at 4 3 none)))
(:dbg ** ((at 6 3 pv) (at 4 3 none)))
(:dbg => {:del ((at 4 3 pv) (at 6 3 none)), :pre ((at 5 3 pv) (at 6 3 none) (protected 6 3 pv)), :when ((at 6 3 none) (at 5 3 ?_) (at 4 3 ?_) (at 1 3 pv) (at 2 3 pv) (clear-me 1 3 pv) (isa pv vehicle) (:guard (and (not= (? x) (? nx1) (? nx2)) (= 1 (abs (- (? nx1) (? nx2))) (abs (- (? x) (? nx1))) (abs (- (? vx1) (? vx2)))) (or (= (? vx1) (? vx)) (= (? vx2) (? vx))) (> (abs (- (? x) (? nx2))) (abs (- (? x) (? nx1)))) (> (abs (- (? x) (? vx1))) (abs (- (? nx1) (? vx1))))))), :txt ((pv moves to 6 3)), :name move-horiz, :achieves (at 6 3 pv), :post ((protected 6 3 pv) (at 5 3 pv)), :cmd ((move pv 6 3)), :add ((at 6 3 pv) (at 4 3 none))})
(:dbg GOALS:)
(:dbg        [move-horiz :=> (at 7 3 pv)])
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING move-horiz => (at 7 3 pv))
(:dbg ** ((at 7 3 pv) (at 5 3 none)))
(:dbg ** ((at 7 3 pv) (at 5 3 none)))
(:dbg => {:del ((at 5 3 pv) (at 7 3 none)), :pre ((at 6 3 pv) (at 7 3 none) (protected 7 3 pv)), :when ((at 7 3 none) (at 6 3 ?_) (at 5 3 ?_) (at 1 3 pv) (at 2 3 pv) (clear-me 1 3 pv) (isa pv vehicle) (:guard (and (not= (? x) (? nx1) (? nx2)) (= 1 (abs (- (? nx1) (? nx2))) (abs (- (? x) (? nx1))) (abs (- (? vx1) (? vx2)))) (or (= (? vx1) (? vx)) (= (? vx2) (? vx))) (> (abs (- (? x) (? nx2))) (abs (- (? x) (? nx1)))) (> (abs (- (? x) (? vx1))) (abs (- (? nx1) (? vx1))))))), :txt ((pv moves to 7 3)), :name move-horiz, :achieves (at 7 3 pv), :post ((protected 7 3 pv) (at 6 3 pv)), :cmd ((move pv 7 3)), :add ((at 7 3 pv) (at 5 3 none))})
(:dbg GOALS:)
(:dbg        [move-horiz :=> (at 8 3 pv)])
(:dbg ------)
(:dbg ** APPLYING move-horiz => (at 8 3 pv))
(:dbg ** ((at 8 3 pv) (at 6 3 none)))
(:dbg ** ((at 8 3 pv) (at 6 3 none)))
(:dbg => {:del ((at 6 3 pv) (at 8 3 none)), :pre ((at 7 3 pv) (at 8 3 none) (protected 8 3 pv)), :when ((at 8 3 none) (at 7 3 ?_) (at 6 3 ?_) (at 1 3 pv) (at 2 3 pv) (clear-me 1 3 pv) (isa pv vehicle) (:guard (and (not= (? x) (? nx1) (? nx2)) (= 1 (abs (- (? nx1) (? nx2))) (abs (- (? x) (? nx1))) (abs (- (? vx1) (? vx2)))) (or (= (? vx1) (? vx)) (= (? vx2) (? vx))) (> (abs (- (? x) (? nx2))) (abs (- (? x) (? nx1)))) (> (abs (- (? x) (? vx1))) (abs (- (? nx1) (? vx1))))))), :txt ((pv moves to 8 3)), :name move-horiz, :achieves (at 8 3 pv), :post ((protected 8 3 pv) (at 7 3 pv)), :cmd ((move pv 8 3)), :add ((at 8 3 pv) (at 6 3 none))})
((npv5 moves to 6 5)
 (npv5 moves to 7 5)
 (npv3 moves to 5 4)
 (npv3 moves to 5 5)
 (npv2 moves to 4 5)
 (pv moves to 3 3)
 (pv moves to 4 3)
 (pv moves to 5 3)
 (pv moves to 6 3)
 (pv moves to 7 3)
 (pv moves to 8 3))
nil
rushhour-lein.core=>