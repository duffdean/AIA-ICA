breed [ants ant]

ants-own
[ 
  is-stressed?
  is-following-pheromone?
  has-found-exit?
  myid
]


to setup-ants  
  breed-ants    
end


to ants-go
  
  ask ants [    
    set myid who
    move-ants        
    ;set shape "ant"
    ;set size 3     
    release-pheromone
  ]
  
  dissipate-pheromone
end


to breed-ants
  create-ants ant-population
  
  ask ants [ 
    setxy 31 31 
    set color red 
    set is-stressed? false    
    set has-found-exit? false
    set is-following-pheromone? false
  ]  
end

;Set ants moving around
to move-ants 
  
  detect-scent myid
    
  ;Will handle other movements from within their own actions, ie moving from repellent, moving to pheromone.
  if not is-stressed?[
    wiggle
    ;fd 0.5
  ]
  
  avoid-wall
  
end



;Detect any scent. Repellent or pheromone
to detect-scent [id-of-ant]
  
  let pher-targets patches in-cone 1 75   
  let rep-target patch-ahead 1
  
  if patch-ahead  1 != nobody[
    set rep-target [repellent] of patch-ahead  1
  ]
  
  let pher-target 0
  ;let rep-target 0
  
  if any? pher-targets [ 
    set pher-target max-one-of pher-targets [pheromone] 
    set is-following-pheromone? true    
  ] 
    
  ;if any? rep-targets [ 
  ;  set rep-target min-one-of rep-targets [repellent]
  ;] 
  
  if pher-target != nobody and pher-target != 0  [
    if ([pheromone] of pher-target  > 0) [
    face pher-target 
      avoid-wall
    fd 0.5 
      
    wiggle
  ]
  ]
  
  if rep-target != nobody [
    ifelse rep-target > repellent[
      avoid-wall
        bk 0.5        
        wiggle
        fd 0.5
      ]
      [
      if rep-target > 0 [
         set heading 0
      ]     
        fd 0.5
      avoid-wall
        wiggle
      ]
  ]
end

;Releasese pheromone and sets stressed flag if the ant finds a patch with repellent. Will continue to release if stressed.
to release-pheromone
  if not is-stressed? [
    if (item 0 pcolor) > 0 [
      if any? ants-on patch-here [
        set is-stressed? true
      ]
    ]
  ]   
  
  if is-stressed? [
    let current-ant myid 
    drop-pheromone -180 2 who 1
  ]
end

;Attempt at a way of specific where the pheromone is to be dropped, and also giving a patch a turtle id. So they dont follow their own trail
to drop-pheromone [angle dist ant-id intensity]
  ask patch-here [
    set pheromone 255
  ]
end

; Spread the repellent out into all four cardinal directions.
to spread-pheromone
  ask patches [
    if old-pheromone > 0 [
      distribute-pheromone old-pheromone
    ]
  ]
end

to distribute-pheromone [source-pheromone]
  let spaces 0
  
  ask neighbors4 [
    if (not is-wall?) and (pheromone <= source-pheromone) [
      set pheromone pheromone + round (source-pheromone * ((pheromone-transfer / 4) / 100))
      if pheromone > 255 [ set pheromone 255 ]
      set spaces spaces + 1
    ]
  ]
  
  set pheromone pheromone - round (source-pheromone * (((pheromone-transfer / 4) * spaces) / 100))
  if pheromone < 0 [ set pheromone 0 ]
end


;Check whether patch has repellent and move away from the repellents least
to check-for-repellent
  let p min-one-of neighbors [repellent]
    if [repellent] of p < repellent [
      face p
      ;move-to p
      ;fd 0.5
      set is-stressed? true
    ]
end


;generic walking function
to wander
  rt random 40 - random 40
  if not can-move? 1
  [ rt 180 ]
  fd 0.5
end

;Decrease the amount of pheromone left by an ant.
to dissipate-pheromone
  ask patches [        
    set pheromone pheromone * (100 - pheromone-decay-rate) / 100 ;;anything over 100 for this value and the pheromone spreads out on its own
    if pheromone < 0.05 [ set pheromone 0 ]
  ]
end

;If any wall patches are within range, step back turn away and move on.
to avoid-wall
  while [ 
    any? patches in-radius 2 with[
      pcolor = [0 0 0]
     ] 
  ]
  [
     bk 0.5
     rt (random 180) - 90
     fd 0.5
  ]  
end